/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsNumber,
  Min,
  Max,
  IsOptional,
  IsEnum,
  IsDate,
  IsString,
  MaxLength,
  ValidateNested,
} from "class-validator";

import { EnumRoomCoinSide } from "./EnumRoomCoinSide";
import { Type } from "class-transformer";
import { Game } from "../../game/base/Game";
import { EnumRoomStatus } from "./EnumRoomStatus";

@ObjectType()
class Room {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  betAmount!: number | null;

  @ApiProperty({
    required: false,
    enum: EnumRoomCoinSide,
  })
  @IsEnum(EnumRoomCoinSide)
  @IsOptional()
  @Field(() => EnumRoomCoinSide, {
    nullable: true,
  })
  coinSide?: "Option1" | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  creator!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Game],
  })
  @ValidateNested()
  @Type(() => Game)
  @IsOptional()
  games?: Array<Game>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    enum: EnumRoomStatus,
  })
  @IsEnum(EnumRoomStatus)
  @IsOptional()
  @Field(() => EnumRoomStatus, {
    nullable: true,
  })
  status?: "Option1" | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Room as Room };
