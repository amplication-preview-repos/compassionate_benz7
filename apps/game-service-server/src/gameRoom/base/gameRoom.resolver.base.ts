/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GameRoom } from "./GameRoom";
import { GameRoomCountArgs } from "./GameRoomCountArgs";
import { GameRoomFindManyArgs } from "./GameRoomFindManyArgs";
import { GameRoomFindUniqueArgs } from "./GameRoomFindUniqueArgs";
import { CreateGameRoomArgs } from "./CreateGameRoomArgs";
import { UpdateGameRoomArgs } from "./UpdateGameRoomArgs";
import { DeleteGameRoomArgs } from "./DeleteGameRoomArgs";
import { GameRoomService } from "../gameRoom.service";
@graphql.Resolver(() => GameRoom)
export class GameRoomResolverBase {
  constructor(protected readonly service: GameRoomService) {}

  async _gameRoomsMeta(
    @graphql.Args() args: GameRoomCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GameRoom])
  async gameRooms(
    @graphql.Args() args: GameRoomFindManyArgs
  ): Promise<GameRoom[]> {
    return this.service.gameRooms(args);
  }

  @graphql.Query(() => GameRoom, { nullable: true })
  async gameRoom(
    @graphql.Args() args: GameRoomFindUniqueArgs
  ): Promise<GameRoom | null> {
    const result = await this.service.gameRoom(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GameRoom)
  async createGameRoom(
    @graphql.Args() args: CreateGameRoomArgs
  ): Promise<GameRoom> {
    return await this.service.createGameRoom({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GameRoom)
  async updateGameRoom(
    @graphql.Args() args: UpdateGameRoomArgs
  ): Promise<GameRoom | null> {
    try {
      return await this.service.updateGameRoom({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameRoom)
  async deleteGameRoom(
    @graphql.Args() args: DeleteGameRoomArgs
  ): Promise<GameRoom | null> {
    try {
      return await this.service.deleteGameRoom(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
