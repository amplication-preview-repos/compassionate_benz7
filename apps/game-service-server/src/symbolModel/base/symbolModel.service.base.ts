/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SymbolModel as PrismaSymbolModel } from "@prisma/client";

export class SymbolModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SymbolModelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.symbolModel.count(args);
  }

  async symbolModels(
    args: Prisma.SymbolModelFindManyArgs
  ): Promise<PrismaSymbolModel[]> {
    return this.prisma.symbolModel.findMany(args);
  }
  async symbolModel(
    args: Prisma.SymbolModelFindUniqueArgs
  ): Promise<PrismaSymbolModel | null> {
    return this.prisma.symbolModel.findUnique(args);
  }
  async createSymbolModel(
    args: Prisma.SymbolModelCreateArgs
  ): Promise<PrismaSymbolModel> {
    return this.prisma.symbolModel.create(args);
  }
  async updateSymbolModel(
    args: Prisma.SymbolModelUpdateArgs
  ): Promise<PrismaSymbolModel> {
    return this.prisma.symbolModel.update(args);
  }
  async deleteSymbolModel(
    args: Prisma.SymbolModelDeleteArgs
  ): Promise<PrismaSymbolModel> {
    return this.prisma.symbolModel.delete(args);
  }
}
