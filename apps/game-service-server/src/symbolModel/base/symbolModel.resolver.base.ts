/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SymbolModel } from "./SymbolModel";
import { SymbolModelCountArgs } from "./SymbolModelCountArgs";
import { SymbolModelFindManyArgs } from "./SymbolModelFindManyArgs";
import { SymbolModelFindUniqueArgs } from "./SymbolModelFindUniqueArgs";
import { CreateSymbolModelArgs } from "./CreateSymbolModelArgs";
import { UpdateSymbolModelArgs } from "./UpdateSymbolModelArgs";
import { DeleteSymbolModelArgs } from "./DeleteSymbolModelArgs";
import { SymbolModelService } from "../symbolModel.service";
@graphql.Resolver(() => SymbolModel)
export class SymbolModelResolverBase {
  constructor(protected readonly service: SymbolModelService) {}

  async _symbolModelsMeta(
    @graphql.Args() args: SymbolModelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SymbolModel])
  async symbolModels(
    @graphql.Args() args: SymbolModelFindManyArgs
  ): Promise<SymbolModel[]> {
    return this.service.symbolModels(args);
  }

  @graphql.Query(() => SymbolModel, { nullable: true })
  async symbolModel(
    @graphql.Args() args: SymbolModelFindUniqueArgs
  ): Promise<SymbolModel | null> {
    const result = await this.service.symbolModel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SymbolModel)
  async createSymbolModel(
    @graphql.Args() args: CreateSymbolModelArgs
  ): Promise<SymbolModel> {
    return await this.service.createSymbolModel({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SymbolModel)
  async updateSymbolModel(
    @graphql.Args() args: UpdateSymbolModelArgs
  ): Promise<SymbolModel | null> {
    try {
      return await this.service.updateSymbolModel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SymbolModel)
  async deleteSymbolModel(
    @graphql.Args() args: DeleteSymbolModelArgs
  ): Promise<SymbolModel | null> {
    try {
      return await this.service.deleteSymbolModel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
